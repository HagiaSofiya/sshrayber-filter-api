{"version":3,"sources":["Styles.js","Loading.js","Logo.js","App.js","Utilities.js","serviceWorker.js","index.js","misc/loading.png","misc/logo.png"],"names":["LoadingStyle","alignItems","display","justifyContent","width","height","LoadingImgStyle","animation","pointerEvents","LogoStyle","margin","SectionStyle","MenuStyle","flexWrap","marginBottom","marginTop","MenuButtonStyle","backgroundColor","color","border","borderBottom","fontFamily","textTransform","fontSize","fontWeight","padding","GridStyle","borderTop","textAlign","PersonStyle","Loading","react_default","a","createElement","style","src","loading","alt","Logo","logo","App","state","isLoading","people","filteredPeople","_this2","this","setState","Promise","resolve","reject","getPeople","url","axios","get","then","response","gottenPeople","concat","data","results","next","catch","err","console","log","key","filter","person","gender","_this3","_this$state","genders","Object","toConsumableArray","Set","map","name","transition","transitions","scaleDown","src_Loading","src_Logo","type","onClick","reset","compareBy","lib_default","columnWidth","gutterWidth","gutterHeight","duration","easing","easings","cubicOut","appearDelay","appear","appeared","enter","entered","leaved","names","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.10ca11f2.chunk.js","sourcesContent":["// Loading Styles\n\nexport const LoadingStyle = {\n    \"alignItems\": \"center\",\n    \"display\": \"flex\",\n    \"justifyContent\": \"center\",\n    \"width\": \"100vw\",\n    \"height\": \"100vh\"\n}\n\nexport const LoadingImgStyle = {\n    \"animation\": \"loading-spin infinite 20s linear\",\n    \"height\": \"40vmin\",\n    \"pointerEvents\": \"none\"\n}\n\n\n//Logo\n\nexport const LogoStyle = {\n    \"display\": \"block\",\n    \"margin\": \"0 auto\",\n    \"width\": \"50%\"\n}\n\n// Filter Styles\n\nexport const SectionStyle = {\n    \"width\": \"80vw\",\n    \"margin\": \"50px auto 100px\"\n}\n\nexport const MenuStyle = {\n    \"display\": \"flex\",\n    \"flexWrap\": \"wrap\",\n    \"justifyContent\": \"space-between\",\n    \"marginBottom\": \"50px\",\n    \"marginTop\": \"25px\"\n}\n\nexport const MenuButtonStyle = {\n    \"backgroundColor\": \"transparent\",\n    \"color\": \"#FFE807\",\n    \"border\": \"0px\",\n    \"borderBottom\": \"1px solid #FFE807\",\n    \"fontFamily\": \"'Jura', sans-serif\",\n    \"textTransform\": \"capitalize\",\n    \"fontSize\": \"22px\",\n    \"fontWeight\": \"700\",\n    \"padding\": \"4px 10px 6px\"\n}\n\nexport const GridStyle = {\n    \"border\": \"1px solid #FFE807\",\n    \"borderTop\": \"none\",\n    \"borderBottom\": \"none\",\n    \"textAlign\": \"center\"\n}\n\nexport const PersonStyle = {\n    \"color\": \"#fbfbfb\",\n    \"fontSize\": \"20px\",\n    \"fontFamily\": \"'Ubuntu', sans-serif\"\n}","import React from 'react';\nimport loading from './misc/loading.png';\nimport { LoadingStyle, LoadingImgStyle } from './Styles';\n\nconst Loading = () => (\n\t<div style={LoadingStyle}>\n\t\t<img src={loading} style={LoadingImgStyle} alt='loading' />\n\t</div>\n)\n  \nexport default Loading;","import React from 'react';\nimport logo from './misc/logo.png';\nimport { LogoStyle } from './Styles';\n\nconst Logo = () => (\n\t<img src={logo} style={LogoStyle} alt='logo' />\n)\n  \nexport default Logo;","import React, { Component } from 'react';\nimport { getPeople } from './Utilities';\nimport Loading from './Loading';\nimport Logo from './Logo';\nimport { SectionStyle , MenuStyle , MenuButtonStyle, GridStyle, PersonStyle } from './Styles';\nimport  StackGrid, { transitions, easings }from 'react-stack-grid';\n\nclass App extends Component {\n\n\tstate = {\n\t\tisLoading: false,\n\t\tpeople: [],\n\t\tfilteredPeople: []\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setState({isLoading: true})\n\t\tnew Promise((resolve, reject) => {\n\t\t\tgetPeople('https://swapi.co/api/people/', [], resolve, reject)\n\t\t})\n\t\t.then(response => this.setState({\n\t\t\tisLoading: false,\n\t\t\tpeople: response,\n\t\t\tfilteredPeople: response\n\t\t}))\n\t}\n\n\tcompareBy(key){\n        this.setState({\n            filteredPeople: this.state.people.filter(person => {\n                return person.gender === key ;\n            })\n        })\n\n    }\n\n\treset(){\n        this.setState({\n            filteredPeople: this.state.people\n        })\n\t}\n\t\n\trender() {\n\t\tconst { isLoading , people,filteredPeople } = this.state\n\t\tconst genders = [...new Set(people.map(name => name.gender))]\n\t\tconst transition = transitions.scaleDown;\n\t\treturn (\n\t\t\tisLoading === true ? <Loading/>\n\t\t\t:<section style={SectionStyle}>\n\t\t\t\t<Logo/>\n\t\t\t\t<div style={MenuStyle}>\n\t\t\t\t\t<button\n\t\t\t\t\t\tstyle={MenuButtonStyle}\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tonClick={() => this.reset()}\n\t\t\t\t\t\tkey=\"reset\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\tall\n\t\t\t\t\t</button>\n\t\t\t\t\t{genders.map(gender => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tstyle={MenuButtonStyle}\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => this.compareBy(gender)}\n\t\t\t\t\t\t\t\tkey={gender}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{gender}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<StackGrid\n\t\t\t\t\t\tstyle={GridStyle}\n\t\t\t\t\t\tcolumnWidth={100}\n\t\t\t\t\t\tgutterWidth={15}\n\t\t\t\t\t\tgutterHeight={30}\n\t\t\t\t\t\tduration={600}\n\t\t\t\t\t\teasing={easings.cubicOut}\n\t\t\t\t\t\tappearDelay={60}\n\t\t\t\t\t\tappear={transition.appear}\n\t\t\t\t\t\tappeared={transition.appeared}\n\t\t\t\t\t\tenter={transition.enter}\n\t\t\t\t\t\tentered={transition.entered}\n\t\t\t\t\t\tleaved={transition.leaved}\n\t\t\t\t\t>\n\t\t\t\t\t\t{filteredPeople.map((names,key) => {\n\t\t\t\t\t\t\treturn <p style={PersonStyle} key={key}>{names.name}</p>\n\t\t\t\t\t\t})}\n\t\t\t\t\t</StackGrid>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t);\n\t}\n}\n\nexport default App;","import axios from 'axios';\n\nexport const getPeople = (url, people, resolve, reject) => {\n\taxios.get(url)\n\t\t.then(response => {\n\t\t\tconst gottenPeople = people.concat(response.data.results)\n\t\t\tif (response.data.next !== null) {\n\t\t\t\tgetPeople(response.data.next, gottenPeople, resolve, reject)\n\t\t\t} else {\n\t\t\t\tresolve(gottenPeople)\n\t\t\t}\n\t\t})\n\t\t.catch(err => console.log(err))\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './misc/reset.css';\nimport './misc/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loading.7686e6f6.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.40e5b6b3.png\";"],"sourceRoot":""}